name: Release

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Version type increment'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        name: Generate app token
        with:
          app-id: ${{ vars.GRIDSUITE_ACTIONS_APPID }}
          private-key: ${{ secrets.GRIDSUITE_ACTIONS_SECRET }}

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0  # Fetch all history for all tags and branches

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Calculate versions
        id: versions
        run: |
          # Get latest tag (e.g., v1.20.0)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix and split version
          LATEST_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          # Calculate versions based on version type
          case "${{ github.event.inputs.versionType }}" in
            "major")
              RELEASE_VERSION="$((MAJOR + 1)).0.0"
              NEXT_VERSION="$((MAJOR + 1)).1.0-SNAPSHOT"
              ;;
            "minor")
              RELEASE_VERSION="$MAJOR.$((MINOR + 1)).0"
              NEXT_VERSION="$MAJOR.$((MINOR + 2)).0-SNAPSHOT"
              ;;
            "patch")
              RELEASE_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              NEXT_VERSION="$MAJOR.$((MINOR + 1)).0-SNAPSHOT"
              ;;
          esac
          
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "Release version will be: ${RELEASE_VERSION}"
          echo "Next development version will be: ${NEXT_VERSION}"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set release version
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.RELEASE_VERSION }} -DgenerateBackupPoms=false
          git commit -am "Release version ${{ steps.versions.outputs.RELEASE_VERSION }}"

      - name: Create and push tag
        run: |
          git tag v${{ steps.versions.outputs.RELEASE_VERSION }}
          git push origin v${{ steps.versions.outputs.RELEASE_VERSION }}
          git push origin main

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh release create v${{ steps.versions.outputs.RELEASE_VERSION }} \
            --title "v${{ steps.versions.outputs.RELEASE_VERSION }}" \
            --generate-notes

      - name: Set next development version
        run: |
          mvn versions:set -DnewVersion=${{ steps.versions.outputs.NEXT_VERSION }} -DgenerateBackupPoms=false
          git commit -am "Prepare for next development version ${{ steps.versions.outputs.NEXT_VERSION }}"
          git push origin main